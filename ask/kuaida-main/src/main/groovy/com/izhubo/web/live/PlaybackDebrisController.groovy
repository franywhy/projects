package com.izhubo.web.liveimport java.util.Map;import static com.izhubo.rest.common.doc.MongoKey.$setimport static com.izhubo.rest.common.util.WebUtils.$$import java.text.SimpleDateFormatimport javax.servlet.http.HttpServletRequestimport org.json.JSONArrayimport org.json.JSONObjectimport org.slf4j.Loggerimport org.slf4j.LoggerFactoryimport org.springframework.stereotype.Controllerimport org.springframework.web.bind.ServletRequestUtilsimport org.springframework.web.bind.annotation.RequestMappingimport org.springframework.web.bind.annotation.RequestMethodimport org.springframework.web.bind.annotation.ResponseBodyimport org.apache.commons.lang3.StringUtils;import com.izhubo.rest.common.util.http.HttpClientUtil4_3import com.izhubo.web.BaseControllerimport com.izhubo.web.vo.BaseResultVOimport com.mongodb.DBCollection;import com.wordnik.swagger.annotations.ApiImplicitParamimport com.wordnik.swagger.annotations.ApiImplicitParamsimport com.wordnik.swagger.annotations.ApiOperation

/** * * @ClassName: PlaybackDebrisController * @Description:自动抓取录制件 * @author zww * @date 2017年6月12日 * */@Controller@RequestMapping("/live_data")
class PlaybackDebrisController extends BaseController{		/** 排课计划 */	public DBCollection class_plan() {		return mainMongo.getCollection("class_plan");	}		/** 排课子表 */	public DBCollection plan_courses() {		return mainMongo.getCollection("plan_courses");	}		/** 直播录制件表 */	public DBCollection live_debris_record() {		return mainMongo.getCollection("live_debris_record");	}		private static Logger logger = LoggerFactory	.getLogger(PlaybackDebrisController.class);			/**	 * 获取保存录制件数据	 * @date 2017年6月12日	 * @param @param request	 */	@ResponseBody	@RequestMapping(value = "save_playback_data", method = RequestMethod.GET, produces = "application/json; charset=utf-8")	@ApiOperation(value = "获取并保存录制件数据", httpMethod = "GET",  notes = "获取并保存录制件数据", response = BaseResultVO.class)	@ApiImplicitParams([		@ApiImplicitParam(name = "start_count_time", value = "开始时间(例子):2017-05-05" , required = false , dataType = "String" , paramType = "query" ),		@ApiImplicitParam(name = "end_count_time", value = "结束时间(例子):2017-05-06" , required = false , dataType = "String" , paramType = "query" )	])	def save_playback_data(HttpServletRequest request){		String start_count_time = ServletRequestUtils.getStringParameter(request, "start_count_time");		String end_count_time = ServletRequestUtils.getStringParameter(request, "end_count_time");		//查找所有的课程		def constants_list = constants().find(null,$$("middle_course_ids":1,"middle_course_liveinfo":1))?.toArray();		//用于获取webcastId		def middle_course_liveinfo = constants_list.get(0)["middle_course_liveinfo"]		//取出所有nc_id		def constants = constants_list.get(0)["middle_course_ids"]		def nc_id_list =[]		for(i in constants){			def class_plan_list = class_plan().find($$("nc_course_id" : i,"dr":0),$$("nc_id" : 1,"nc_course_id":1))?.toArray();			for(k in class_plan_list){				nc_id_list<<k			}		}		//如果传入时间为空，为定时任务，时间减少一天		if(StringUtils.isBlank(start_count_time)){			Long today_time = get_start_time()			String day_String = date_format_String(today_time)			start_count_time = subtractOneday(day_String)			end_count_time = subtractOneday(day_String)		}		//传入时间的对比		Long start_count_time_long = get_start_time(start_count_time)		Long end_count_time_long = get_end_time(end_count_time)		if(start_count_time_long > end_count_time_long){			return [code : -99];		}		Long reduce_time = end_count_time_long-start_count_time_long		Integer except = (Integer)(reduce_time/86399999)		for(int day = 0 ; day < except ; day++){			//转化为long			Long live_start_time_long = get_start_time(start_count_time)			Long live_end_time_long = get_end_time(start_count_time)			for(j in nc_id_list){				//获取当天的直播				def plan_courses_list = plan_courses().find($$("nc_plan_id" : j["nc_id"],"dr":0,"live_start_time_long":$$('$gte':live_start_time_long),"live_end_time_long":$$('$lte':live_end_time_long)),$$("nc_id" : 1,"live_start_time_long" : 1,"live_end_time_long" : 1,"live_start_time":1,"live_end_time":1))?.toArray();				if(plan_courses_list.size!=0){					def end = plan_courses_list.get(0)["live_end_time"]					def start = plan_courses_list.get(0)["live_start_time"]					Long end_long = plan_courses_list.get(0)["live_end_time_long"]					Long start_long = plan_courses_list.get(0)["live_start_time_long"]					Long vague_start_long = start_long - 1800000					Long vague_end_long = end_long + 7200000					def course_time_id = plan_courses_list.get(0)["nc_id"]					//有直播的课程					if(end!=null && start!=null){						String URL = "http://hqyzx.gensee.com/integration/site/webcast/record/info"						String webcastId						for(liveid in middle_course_liveinfo){							if(liveid.get("course_id") == j["nc_course_id"]){								webcastId = liveid.get("liveid");								break ;							}						}						//String startTime = date_format_String(live_start_time_long)//"2017-06-04 00:00:00"						//String endTime = date_format_String(live_end_time_long)						def map = ['loginName':'2880696173@qq.com','password':'123456','webcastId':webcastId]						def data_list = HttpClientUtil4_3.post(URL,map,null);						JSONObject jsonObject = new JSONObject(data_list)						JSONArray record_list = jsonObject.getJSONArray("recordList")						if(start_long < end_long){							Integer size = record_list.length();							def differ_time_map = [:]							def differ_list = []							for(int i=0; i<size;i++){								Long record_start_time = record_list.get(i)["recordStartTime"]								Long record_end_time = record_list.get(i)["recordEndTime"]								//println "录制件开始时间："+record_list.get(i)["recordStartTime"]+"[直播开始时间]"+start_long								//println "录制件结束时间："+record_list.get(i)["recordEndTime"]+"[直播结束时间]"+end_long+"[直播结束模糊配置时间]"+vague_end_long								//和昨天直播时间做对比								//录制件时间 比直播时间大(一般情况都是)匹配								if(start_long < record_start_time && vague_end_long > record_end_time){									Long differ = record_start_time - start_long									differ_time_map[differ] = i									differ_list << differ								}else if(start_long > record_start_time && record_start_time > vague_start_long){									Long differ = start_long - record_start_time									differ_time_map[differ] = i									differ_list << differ								}							}							if(differ_list){								def playback_record = record_list.get(differ_time_map.get(differ_list.min()))								//结果录入								Long record_start_time = playback_record["recordStartTime"]								Long record_end_time = playback_record["recordEndTime"]								String playback_video_id = playback_record["id"]								String url = playback_record["url"]								//保存结果数据								def result_map = [:]								result_map.put("webcastId", webcastId)								result_map.put("course_time_id", course_time_id)								result_map.put("record_start_time", record_start_time)								result_map.put("record_end_time", record_end_time)								result_map.put("playback_video_id", playback_video_id)								result_map.put("url", url)																saveResult(result_map)							}else{//无正确数据							}						}else{//直播时间异常						}					}				}			}			start_count_time = addOneday(start_count_time)//统计多日		}		return [code : 1]	}					/**	 * 获取当天起始时间戳	 * @return	 */	private Long get_start_time(String time_param){		Calendar todayStart = Calendar.getInstance();		if(StringUtils.isNotBlank(time_param)){			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");			String time = time_param;			Date date = format.parse(time);			todayStart.setTime(date);		}		todayStart.set(Calendar.HOUR_OF_DAY, 0);		todayStart.set(Calendar.MINUTE, 0);		todayStart.set(Calendar.SECOND, 0);		todayStart.set(Calendar.MILLISECOND, 0);		return todayStart.getTime().getTime();	}	 		/**	 * 获取当天结束时间戳	 * @return	 */	private Long get_end_time(String time_param){		Calendar todayEnd = Calendar.getInstance();		if(StringUtils.isNotBlank(time_param)){			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");			String time = time_param;			Date date = format.parse(time);			todayEnd.setTime(date);			}		todayEnd.set(Calendar.HOUR_OF_DAY, 23);		todayEnd.set(Calendar.MINUTE, 59);		todayEnd.set(Calendar.SECOND, 59);		todayEnd.set(Calendar.MILLISECOND, 999);		return todayEnd.getTime().getTime();	}			/**	 * 时间戳转化为Sting	 * @param param_time	 * @return	 */	private String date_format_String(Long param_time){		SimpleDateFormat format =  new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		Long time=new Long(param_time);		String d = format.format(time);		return d	}			/**	 * 日期减少一天	 */	public static String subtractOneday(String today){		SimpleDateFormat f =  new SimpleDateFormat("yyyy-MM-dd");		try   {			Date  d  =  new Date(f.parse(today).getTime()-24*3600*1000);			return  f.format(d);		}		catch(Exception ex) {			return   "输入格式错误";		}	}			/**	 * 日期增加一天	 */	public static String addOneday(String today){		SimpleDateFormat f =  new SimpleDateFormat("yyyy-MM-dd");		try   {			Date  d  =  new Date(f.parse(today).getTime()+24*3600*1000);			return  f.format(d);		}		catch(Exception ex) {			return   "输入格式错误";		}	}			/**	 * 保存学院观看直播记录	 */	public void saveResult(Map param){		def id = param.get("course_time_id")		String webcastId = param.get("webcastId")		def course_time_id = param.get("course_time_id")		Long record_start_time = param.get("record_start_time")		Long record_end_time = param.get("record_end_time")		String playback_video_id = param.get("playback_video_id")		String url = param.get("url")				def result = $$("_id", id);		result.append("webcastId", webcastId);		result.append("course_time_id", course_time_id);		result.append("record_start_time", record_start_time);		result.append("record_end_time", record_end_time);		result.append("playback_video_id", playback_video_id);		result.append("url", url);				live_debris_record().save(result);	}
}
